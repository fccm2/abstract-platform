/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI603979781 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI603979780 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555458 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI603979779 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI469762071 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NNI603979779 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI33555458, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33555458, name: "y", sons: null}]};
NTI603979779.node = NNI603979779;
var NNI603979780 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI33555458, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33555458, name: "y", sons: null}]};
NTI603979780.node = NNI603979780;
var NNI469762071 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "center", len: 0, typ: NTI603979779, name: "center", sons: null}, 
{kind: 1, offset: "radius", len: 0, typ: NTI33555458, name: "radius", sons: null}, 
{kind: 1, offset: "inertia", len: 0, typ: NTI603979780, name: "inertia", sons: null}, 
{kind: 1, offset: "is_static", len: 0, typ: NTI33554466, name: "is_static", sons: null}, 
{kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]};
NTI469762071.node = NNI469762071;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI603979781 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI603979779, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI603979779, name: "b", sons: null}]};
NTI603979781.node = NNI603979781;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;

function setConstr() {
    var result = {};
  for (var i = 0; i < arguments.length; ++i) {
   var x = arguments[i];
   if (typeof(x) == "object") {
    for (var j = x[0]; j <= x[1]; ++j) {
     result[j] = true;
    }
   } else {
    result[x] = true;
   }
  }
  return result;
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
 var result_33557151 = null;
  switch (ti_33557142.kind) {
  case 21:
  case 22:
  case 23:
  case 5:
   if (!(isFatPointer_33557131(ti_33557142))) {
   result_33557151 = src_33557141;
   }
   else {
    result_33557151 = [src_33557141[0], src_33557141[1]];
   }
   break;
  case 19:
      if (dest_33557140 === null || dest_33557140 === undefined) {
    dest_33557140 = {};
   }
   else {
    for (var key in dest_33557140) { delete dest_33557140[key]; }
   }
   for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
   result_33557151 = dest_33557140;
   break;
  case 18:
  case 17:
   if (!((ti_33557142.base == null))) {
   result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
   }
   else {
   if ((ti_33557142.kind == 17)) {
   result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
   }
   else {
    result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
   }
   }
   nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
   break;
  case 24:
  case 4:
  case 27:
  case 16:
      if (src_33557141 === null) {
    result_33557151 = null;
   }
   else {
    if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
     dest_33557140 = new Array(src_33557141.length);
    }
    result_33557151 = dest_33557140;
    for (var i = 0; i < src_33557141.length; ++i) {
     result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
    }
   }
   break;
  case 28:
      if (src_33557141 !== null) {
    result_33557151 = src_33557141.slice(0);
   }
   break;
  default: 
   result_33557151 = src_33557141;
   break;
  }
 return result_33557151;
}

function makeNimstrLit(c_33556801) {
   var result = [];
 for (var i = 0; i < c_33556801.length; ++i) {
  result[i] = c_33556801.charCodeAt(i);
 }
 return result;
}

function mnewString(len_33556893) {
    return new Array(len_33556893);
}

function toJSStr(s_33556807) {
          var Temporary5;
      var Temporary7;

 var result_33556808 = null;

  var res_33556842 = newSeq_33556825((s_33556807).length);
  var i_33556843 = 0;
  var j_33556844 = 0;
  Label1: do {
    Label2: while (true) {
    if (!(i_33556843 < (s_33556807).length)) break Label2;
     var c_33556845 = s_33556807[i_33556843];
     if ((c_33556845 < 128)) {
     res_33556842[j_33556844] = String.fromCharCode(c_33556845);
     i_33556843 += 1;
     }
     else {
      var helper_33556857 = newSeq_33556825(0);
      Label3: do {
        Label4: while (true) {
        if (!true) break Label4;
         var code_33556858 = c_33556845.toString(16);
         if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
         helper_33556857.push("%0");;
         }
         else {
         helper_33556857.push("%");;
         }
         helper_33556857.push(code_33556858);;
         i_33556843 += 1;
          if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {           Temporary5 = (s_33556807[i_33556843] < 128);          }         if (Temporary5) {
         break Label3;
         }
         c_33556845 = s_33556807[i_33556843];
        }
      } while (false);
++excHandler;
      Temporary7 = framePtr;
      try {
      res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      framePtr = Temporary7;
      res_33556842[j_33556844] = helper_33556857.join("");
      lastJSError = prevJSError;
      } finally {
      framePtr = Temporary7;
      }
     }
     j_33556844 += 1;
    }
  } while (false);
  if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
        else { res_33556842.length = j_33556844; };
  result_33556808 = res_33556842.join("");

 return result_33556808;
}

function raiseException(e_33556667, ename_33556668) {
  e_33556667.name = ename_33556668;
  if ((excHandler == 0)) {
  unhandledException(e_33556667);
  }
  throw e_33556667;
}

function addInt(a_33556940, b_33556941) {
    var result = a_33556940 + b_33556941;
  checkOverflowInt(result);
  return result;
}

function chckRange(i_33557189, a_33557190, b_33557191) {
   var Temporary1;

 var result_33557192 = 0;

 BeforeRet: do {
   if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {    Temporary1 = (i_33557189 <= b_33557191);   }  if (Temporary1) {
  result_33557192 = i_33557189;
  break BeforeRet;
  }
  else {
  raiseRangeError();
  }
 } while (false);

 return result_33557192;
}

function chckIndx(i_33557184, a_33557185, b_33557186) {
   var Temporary1;

 var result_33557187 = 0;

 BeforeRet: do {
   if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {    Temporary1 = (i_33557184 <= b_33557186);   }  if (Temporary1) {
  result_33557187 = i_33557184;
  break BeforeRet;
  }
  else {
  raiseIndexError(i_33557184, a_33557185, b_33557186);
  }
  
 } while (false);

 return result_33557187;
}

function mulInt(a_33556948, b_33556949) {
    var result = a_33556948 * b_33556949;
  checkOverflowInt(result);
  return result;
}

function modInt(a_33556956, b_33556957) {
    if (b_33556957 == 0) raiseDivByZero();
  if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
  return Math.trunc(a_33556956 % b_33556957);
}

function divInt(a_33556952, b_33556953) {
    if (b_33556953 == 0) raiseDivByZero();
  if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
  return Math.trunc(a_33556952 / b_33556953);
}

function subInt(a_33556944, b_33556945) {
    var result = a_33556944 - b_33556945;
  checkOverflowInt(result);
  return result;
}
if (!Math.trunc) {
 Math.trunc = function(v) {
  v = +v;
  if (!isFinite(v)) return v;
  return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
 };
}

var objectID_855638178 = [0];
var cnv_469762051 = document.getElementById("cp");
var ctx_469762052 = cnv_469762051.getContext('2d');

function isFatPointer_33557131(ti_33557132) {
 var result_33557133 = false;
 BeforeRet: do {
  result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
  break BeforeRet;
 } while (false);

 return result_33557133;
}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
  switch (n_33557146.kind) {
  case 0:
   break;
  case 1:
      dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
   break;
  case 2:
     for (var i = 0; i < n_33557146.sons.length; i++) {
   nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
  }
   break;
  case 3:
      dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
   for (var i = 0; i < n_33557146.sons.length; ++i) {
    nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
   }
   break;
  }
}
var gravity_469762063 = {x: 0.0, y: 1.8};
var restitution_469762064 = 0.6;
var dt_469762065 = 0.2;
var c1_469762072 = [{center: {x: 120.0, y: 70.0}, radius: 9.6, inertia: {x: 0.0, y: 0.0}, is_static: false}];
var circles_469762077 = [[nimCopy(null, c1_469762072[0], NTI469762071)]];
var segments_469762082 = [[]];
var tex_filename_469762083 = "./Abstract_Platformer_370_assets/Vector/vector_complete.svg";
var tex_loaded_469762084 = [false];

function tex_onload_469762130() {
  tex_loaded_469762084[0] = true;
}
var tex_469762131 = new Image();
tex_469762131.src = tex_filename_469762083;
tex_469762131.onload = tex_onload_469762130;

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
     if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
   var off = x_33556420[x_33556420_Idx].length;
   x_33556420[x_33556420_Idx].length += y_33556421.length;
   for (var i = 0; i < y_33556421.length; ++i) {
    x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
   }
}

function newSeq_33556825(len_33556827) {
 var result_33556828 = [];

  result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
 return result_33556828;
}

function unhandledException(e_33556663) {
  var buf_33556664 = [[]];
  if (!(((e_33556663.message).length == 0))) {
  buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
  buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
  }
  else {
  buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
  }
  buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
  add_33556419(buf_33556664, 0, e_33556663.name);
  buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
  var cbuf_33556665 = toJSStr(buf_33556664[0]);
  framePtr = null;
   if (typeof(Error) !== "undefined") {
  throw new Error(cbuf_33556665);
 }
 else {
  throw cbuf_33556665;
 }
}

function raiseOverflow() {
  raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");
}

function checkOverflowInt(a_33556938) {
    if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
}

function raiseRangeError() {
  raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
  var old_251658421 = (result_251658417[result_251658417_Idx]).length;
  (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
  Label1: do {
   var iHEX60gensym4_251658435 = 0;
   var i_469762317 = 0;
   Label2: do {
     Label3: while (true) {
     if (!(i_469762317 < n_251658420)) break Label3;
      iHEX60gensym4_251658435 = i_469762317;
      result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
      i_469762317 = addInt(i_469762317, 1);
     }
   } while (false);
  } while (false);
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
  addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
  addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
  addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);
}

function HEX24_335544323(x_335544324) {
 var result_335544325 = [[]];

  addInt_251658457(result_335544325, 0, x_335544324);

 return result_335544325[0];
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
  var Temporary1;

  if ((b_33556756 < a_33556755)) {
  Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
  }
  else {
  Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
  }
  
  raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");
}

function find_469762238(a_469762241, item_469762242) {
 var result_469762243 = 0;

 BeforeRet: do {
  result_469762243 = 0;
  Label1: do {
   var i_469762256 = 0;
   var i_469762323 = 0;
   Label2: do {
     Label3: while (true) {
     if (!(i_469762323 < (a_469762241).length)) break Label3;
      i_469762256 = a_469762241[chckIndx(i_469762323, 0, (a_469762241).length - 1)];
      if ((i_469762256 == item_469762242)) {
      break BeforeRet;
      }
      result_469762243 = addInt(result_469762243, 1);
      i_469762323 = addInt(i_469762323, 1);
     }
   } while (false);
  } while (false);
  result_469762243 = -1;
 } while (false);

 return result_469762243;
}

function contains_469762233(a_469762235, item_469762236) {
 var result_469762237 = false;

 BeforeRet: do {
  result_469762237 = (0 <= find_469762238(a_469762235, item_469762236));
  break BeforeRet;
 } while (false);

 return result_469762237;
}

function raiseDivByZero() {
  raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");
}

function addSegment_469762163(x1_469762164, y1_469762165, x2_469762166, y2_469762167) {
  var a_469762168 = {x: x1_469762164, y: y1_469762165};
  var b_469762169 = {x: x2_469762166, y: y2_469762167};
  var seg_469762170 = {a: nimCopy(null, a_469762168, NTI603979779), b: nimCopy(null, b_469762169, NTI603979779)};
  var Temporary1 = nimCopy(null, seg_469762170, NTI603979781);
  segments_469762082[0].push(Temporary1);;
}

function addSquare_469762184(dx_469762185, dy_469762186, dw_469762187, dh_469762188) {
  addSegment_469762163(dx_469762185, dy_469762186, addInt(dx_469762185, dw_469762187), dy_469762186);
  addSegment_469762163(dx_469762185, addInt(dy_469762186, dh_469762188), addInt(dx_469762185, dw_469762187), addInt(dy_469762186, dh_469762188));
  addSegment_469762163(dx_469762185, dy_469762186, dx_469762185, addInt(dy_469762186, dh_469762188));
  addSegment_469762163(addInt(dx_469762185, dw_469762187), dy_469762186, addInt(dx_469762185, dw_469762187), addInt(dy_469762186, dh_469762188));
}

function sysFatal_218103842(message_218103845) {
  raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
}

function raiseAssert_218103840(msg_218103841) {
  sysFatal_218103842(msg_218103841);
}

function failedAssertImpl_218103864(msg_218103865) {
  raiseAssert_218103840(msg_218103865);
}
var map_469762193 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 1, 1, 0, 0, 0, 42, 0, 2, 3, 38, 1, 1, 39, 3, 3, 3, 3, 3, 3, 3, 38, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var coll_469762198 = [1, 2, 3, 4, 38, 39];
Label2: do {
 var j_469762231 = [0];
 var tm_469762232 = [0];
 var i_469762310 = 0;
 var L_469762311 = (map_469762193).length;
 Label3: do {
   Label4: while (true) {
   if (!(i_469762310 < L_469762311)) break Label4;
    j_469762231[0] = i_469762310;
    tm_469762232[0] = map_469762193[chckIndx(i_469762310, 0, (map_469762193).length - 1)];
    if (contains_469762233(coll_469762198, tm_469762232[0])) {
    var dx_469762270 = mulInt(modInt(j_469762231[0], 12), 32);
    var dy_469762271 = mulInt(divInt(j_469762231[0], 12), 32);
    addSquare_469762184(dx_469762270, dy_469762271, 32, 32);
    }
    i_469762310 = addInt(i_469762310, 1);
    if (!(((map_469762193).length == L_469762311))) {
    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
    }
   }
 } while (false);
} while (false);

function HEX2DHEX3D_469762468(x_469762470, x_469762470_Idx, y_469762471) {
  x_469762470[x_469762470_Idx] = (x_469762470[x_469762470_Idx] - y_469762471);
}

function max_33556202(x_33556203, y_33556204) {
  var Temporary1;
   var Temporary2;

 var result_33556205 = 0.0;

   if ((y_33556204 <= x_33556203)) Temporary2 = true; else {    Temporary2 = !((y_33556204 == y_33556204));   }  if (Temporary2) {
  Temporary1 = x_33556203;
  }
  else {
  Temporary1 = y_33556204;
  }
  
  result_33556205 = Temporary1;

 return result_33556205;
}

function HEX2BHEX3D_469762365(x_469762367, x_469762367_Idx, y_469762368) {
  x_469762367[x_469762367_Idx] = (x_469762367[x_469762367_Idx] + y_469762368);
}

function min_33556194(x_33556195, y_33556196) {
  var Temporary1;
   var Temporary2;

 var result_33556197 = 0.0;

   if ((x_33556195 <= y_33556196)) Temporary2 = true; else {    Temporary2 = !((y_33556196 == y_33556196));   }  if (Temporary2) {
  Temporary1 = x_33556195;
  }
  else {
  Temporary1 = y_33556196;
  }
  
  result_33556197 = Temporary1;

 return result_33556197;
}

function key_event_469762563(k_469762564) {
  var c_469762565 = circles_469762077[0][chckIndx(0, 0, (circles_469762077[0]).length - 1)];
  var ck_469762566 = k_469762564.keyCode;
  switch (ck_469762566) {
  case 37:
   HEX2DHEX3D_469762468(c_469762565.inertia, "x", 1.2);
   HEX2DHEX3D_469762468(c_469762565.inertia, "y", 1.8);
   c_469762565.inertia.x = max_33556202(c_469762565.inertia.x, -10.0);
   c_469762565.inertia.y = max_33556202(c_469762565.inertia.y, -14.0);
   break;
  case 39:
   HEX2BHEX3D_469762365(c_469762565.inertia, "x", 1.2);
   HEX2DHEX3D_469762468(c_469762565.inertia, "y", 1.8);
   c_469762565.inertia.x = min_33556194(c_469762565.inertia.x, 10.0);
   c_469762565.inertia.y = max_33556202(c_469762565.inertia.y, -14.0);
   break;
  case 38:
   HEX2DHEX3D_469762468(c_469762565.inertia, "y", 2.2);
   c_469762565.inertia.y = max_33556202(c_469762565.inertia.y, -14.0);
   break;
  default: 
   break;
  }
}

function apply_gravity_469762360(circle_469762362, g_469762363, dt_469762364) {
  HEX2BHEX3D_469762365(circle_469762362.inertia, "x", (g_469762363.x * dt_469762364));
  HEX2BHEX3D_469762365(circle_469762362.inertia, "y", (g_469762363.y * dt_469762364));
}

function collision_circle_segment_469762408(circle_469762410, segment_469762411, restitution_469762412) {
   var Temporary1;
   var Temporary2;
   var Temporary3;

  var cx_469762413 = circle_469762410.center.x;
  var cy_469762414 = circle_469762410.center.y;
  var r_469762415 = circle_469762410.radius;
  var vx_469762416 = circle_469762410.inertia.x;
  var vy_469762417 = circle_469762410.inertia.y;
  var a_469762418 = nimCopy(null, segment_469762411.a, NTI603979779);
  var b_469762419 = nimCopy(null, segment_469762411.b, NTI603979779);
  var min_x_469762420 = min_33556194(segment_469762411.a.x, segment_469762411.b.x);
  var min_y_469762421 = min_33556194(segment_469762411.a.y, segment_469762411.b.y);
  var max_x_469762422 = max_33556202(segment_469762411.a.x, segment_469762411.b.x);
  var max_y_469762423 = max_33556202(segment_469762411.a.y, segment_469762411.b.y);
   if (!(min_x_469762420 <= (cx_469762413 + r_469762415))) Temporary3 = false; else {    Temporary3 = ((cx_469762413 - r_469762415) <= max_x_469762422);   }   if (!Temporary3) Temporary2 = false; else {    Temporary2 = (min_y_469762421 <= (cy_469762414 + r_469762415));   }   if (!Temporary2) Temporary1 = false; else {    Temporary1 = ((cy_469762414 - r_469762415) <= max_y_469762423);   }  if (Temporary1) {
  var dx_469762424 = (segment_469762411.b.x - segment_469762411.a.x);
  var dy_469762425 = (segment_469762411.b.y - segment_469762411.a.y);
  var fx_469762426 = (cx_469762413 - segment_469762411.a.x);
  var fy_469762427 = (cy_469762414 - segment_469762411.a.y);
  var t_469762428 = (((fx_469762426 * dx_469762424) + (fy_469762427 * dy_469762425)) / ((dx_469762424 * dx_469762424) + (dy_469762425 * dy_469762425)));
  var proj_x_469762429 = 0.0;
  var proj_y_469762430 = 0.0;
  if ((t_469762428 < 0.0)) {
  proj_x_469762429 = a_469762418.x;
  proj_y_469762430 = a_469762418.y;
  }
  else {
  if ((1.0 < t_469762428)) {
  proj_x_469762429 = b_469762419.x;
  proj_y_469762430 = b_469762419.y;
  }
  else {
   proj_x_469762429 = (a_469762418.x + (t_469762428 * dx_469762424));
   proj_y_469762430 = (a_469762418.y + (t_469762428 * dy_469762425));
  }
  }
  var diff_x_469762431 = (cx_469762413 - proj_x_469762429);
  var diff_y_469762432 = (cy_469762414 - proj_y_469762430);
  var distance_469762433 = Math.sqrt(((diff_x_469762431 * diff_x_469762431) + (diff_y_469762432 * diff_y_469762432)));
  if ((distance_469762433 <= r_469762415)) {
  var normal_x_469762434 = ((cx_469762413 - proj_x_469762429) / distance_469762433);
  var normal_y_469762435 = ((cy_469762414 - proj_y_469762430) / distance_469762433);
  var dot_product_469762436 = ((vx_469762416 * normal_x_469762434) + (vy_469762417 * normal_y_469762435));
  if (!(circle_469762410.is_static)) {
  circle_469762410.inertia.x = (vx_469762416 - (((1.0 + restitution_469762412) * dot_product_469762436) * normal_x_469762434));
  circle_469762410.inertia.y = (vy_469762417 - (((1.0 + restitution_469762412) * dot_product_469762436) * normal_y_469762435));
  }
  var penetration_depth_469762437 = (r_469762415 - distance_469762433);
  if (!(circle_469762410.is_static)) {
  circle_469762410.center.x = (cx_469762413 + (normal_x_469762434 * penetration_depth_469762437));
  circle_469762410.center.y = (cy_469762414 + (normal_y_469762435 * penetration_depth_469762437));
  }
  }
  }
}

function normalize_vector_603979799(v_603979800) {
  var Temporary1;

 var result_603979801 = ({x: 0.0, y: 0.0});

  var magnitude_603979802 = Math.sqrt(((v_603979800.x * v_603979800.x) + (v_603979800.y * v_603979800.y)));
  if ((magnitude_603979802 == 0.0)) {
  Temporary1 = {x: 0.0, y: 0.0};
  }
  else {
  Temporary1 = {x: (v_603979800.x / magnitude_603979802), y: (v_603979800.y / magnitude_603979802)};
  }
  
  result_603979801 = nimCopy(result_603979801, Temporary1, NTI603979780);

 return result_603979801;
}

function collision_circle_circle_469762454(circle1_469762456, circle2_469762457, restitution_469762458) {
  var dx_469762459 = (circle2_469762457.center.x - circle1_469762456.center.x);
  var dy_469762460 = (circle2_469762457.center.y - circle1_469762456.center.y);
  var distance_469762461 = Math.sqrt(((dx_469762459 * dx_469762459) + (dy_469762460 * dy_469762460)));
  var overlap_469762462 = ((circle1_469762456.radius + circle2_469762457.radius) - distance_469762461);
  if ((0.0 < overlap_469762462)) {
  var normal_469762463 = normalize_vector_603979799({x: dx_469762459, y: dy_469762460});
  var relative_velocity_x_469762464 = (circle1_469762456.inertia.x - circle2_469762457.inertia.x);
  var relative_velocity_y_469762465 = (circle1_469762456.inertia.y - circle2_469762457.inertia.y);
  var dot_product_469762466 = ((relative_velocity_x_469762464 * normal_469762463.x) + (relative_velocity_y_469762465 * normal_469762463.y));
  if ((0.0 < dot_product_469762466)) {
  var impulse_469762467 = (((1.0 + restitution_469762458) * dot_product_469762466) / (circle1_469762456.radius + circle2_469762457.radius));
  if (!(circle1_469762456.is_static)) {
  HEX2DHEX3D_469762468(circle1_469762456.inertia, "x", (impulse_469762467 * normal_469762463.x));
  HEX2DHEX3D_469762468(circle1_469762456.inertia, "y", (impulse_469762467 * normal_469762463.y));
  }
  if (!(circle2_469762457.is_static)) {
  HEX2BHEX3D_469762365(circle2_469762457.inertia, "x", (impulse_469762467 * normal_469762463.x));
  HEX2BHEX3D_469762365(circle2_469762457.inertia, "y", (impulse_469762467 * normal_469762463.y));
  }
  var separation_469762484 = (overlap_469762462 / 2.0);
  if (!(circle1_469762456.is_static)) {
  HEX2DHEX3D_469762468(circle1_469762456.center, "x", (normal_469762463.x * separation_469762484));
  HEX2DHEX3D_469762468(circle1_469762456.center, "y", (normal_469762463.y * separation_469762484));
  }
  if (!(circle2_469762457.is_static)) {
  HEX2BHEX3D_469762365(circle2_469762457.center, "x", (normal_469762463.x * separation_469762484));
  HEX2BHEX3D_469762365(circle2_469762457.center, "y", (normal_469762463.y * separation_469762484));
  }
  }
  }
}

function update_circles_469762339(circles_469762341, circles_469762341_Idx, segments_469762342, gravity_469762343, dt_469762344, restitution_469762345) {
  Label1: do {
   var i_469762354 = 0;
   var colontmp__469762620 = 0;
   colontmp__469762620 = (circles_469762341[circles_469762341_Idx]).length;
   var i_469762621 = 0;
   Label2: do {
     Label3: while (true) {
     if (!(i_469762621 < colontmp__469762620)) break Label3;
      i_469762354 = i_469762621;
      if (!(circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)].is_static)) {
      apply_gravity_469762360(circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)], gravity_469762343, dt_469762344);
      HEX2BHEX3D_469762365(circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)].center, "x", (circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)].inertia.x * dt_469762344));
      HEX2BHEX3D_469762365(circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)].center, "y", (circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)].inertia.y * dt_469762344));
      Label4: do {
       var segment_469762402 = ({a: ({x: 0.0, y: 0.0}), b: ({x: 0.0, y: 0.0})});
       var i_469762617 = 0;
       var L_469762618 = (segments_469762342).length;
       Label5: do {
         Label6: while (true) {
         if (!(i_469762617 < L_469762618)) break Label6;
          segment_469762402 = segments_469762342[chckIndx(i_469762617, 0, (segments_469762342).length - 1)];
          collision_circle_segment_469762408(circles_469762341[circles_469762341_Idx][chckIndx(i_469762354, 0, (circles_469762341[circles_469762341_Idx]).length - 1)], segment_469762402, restitution_469762345);
          i_469762617 = addInt(i_469762617, 1);
          if (!(((segments_469762342).length == L_469762618))) {
          failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
         }
       } while (false);
      } while (false);
      }
      i_469762621 = addInt(i_469762621, 1);
     }
   } while (false);
  } while (false);
  Label7: do {
   var i_469762445 = 0;
   var colontmp__469762629 = 0;
   colontmp__469762629 = (circles_469762341[circles_469762341_Idx]).length;
   var i_469762630 = 0;
   Label8: do {
     Label9: while (true) {
     if (!(i_469762630 < colontmp__469762629)) break Label9;
      i_469762445 = i_469762630;
      Label10: do {
       var j_469762453 = 0;
       var colontmp__469762625 = 0;
       var colontmp__469762626 = 0;
       colontmp__469762625 = addInt(i_469762445, 1);
       colontmp__469762626 = (circles_469762341[circles_469762341_Idx]).length;
       var i_469762627 = colontmp__469762625;
       Label11: do {
         Label12: while (true) {
         if (!(i_469762627 < colontmp__469762626)) break Label12;
          j_469762453 = i_469762627;
          collision_circle_circle_469762454(circles_469762341[circles_469762341_Idx][chckIndx(i_469762445, 0, (circles_469762341[circles_469762341_Idx]).length - 1)], circles_469762341[circles_469762341_Idx][chckIndx(j_469762453, 0, (circles_469762341[circles_469762341_Idx]).length - 1)], restitution_469762345);
          i_469762627 = addInt(i_469762627, 1);
         }
       } while (false);
      } while (false);
      i_469762630 = addInt(i_469762630, 1);
     }
   } while (false);
  } while (false);
}

function bounds_469762325(circles_469762327, circles_469762327_Idx) {
  var c_469762328 = circles_469762327[circles_469762327_Idx][chckIndx(0, 0, (circles_469762327[circles_469762327_Idx]).length - 1)];
  c_469762328.center.x = max_33556202(c_469762328.center.x, 9.6);
  c_469762328.center.x = min_33556194(c_469762328.center.x, 379.2);
  c_469762328.center.y = max_33556202(c_469762328.center.y, -0.40000000000000036);
}

function HEX2AHEX3D_469762510(x_469762512, x_469762512_Idx, y_469762513) {
  x_469762512[x_469762512_Idx] = (x_469762512[x_469762512_Idx] * y_469762513);
}

function draw_bg_469762053() {
  ctx_469762052.beginPath();
  ctx_469762052.fillStyle = "#444";
  ctx_469762052.rect(0, 0, 384, 256);
  ctx_469762052.fill();
}

function draw_ap2_469762547(c_469762549) {
  var cx_469762550 = c_469762549.center.x;
  var cy_469762551 = c_469762549.center.y;
  var dx_469762552 = (cx_469762550 - 9.0);
  var dy_469762553 = (cy_469762551 - 11.0);
  ctx_469762052.drawImage(tex_469762131, 1788, 21, 38, 44, dx_469762552, dy_469762553, 19, 22);
}

function animate_469762338() {
  update_circles_469762339(circles_469762077, 0, segments_469762082[0], gravity_469762063, dt_469762065, restitution_469762064);
  bounds_469762325(circles_469762077, 0);
  HEX2AHEX3D_469762510(circles_469762077[0][chckIndx(0, 0, (circles_469762077[0]).length - 1)].inertia, "x", 0.99);
  draw_bg_469762053();
  if (tex_loaded_469762084[0]) {
  Label1: do {
   var j_469762519 = 0;
   var tm_469762520 = 0;
   var i_469762606 = 0;
   var L_469762607 = (map_469762193).length;
   Label2: do {
     Label3: while (true) {
     if (!(i_469762606 < L_469762607)) break Label3;
      j_469762519 = i_469762606;
      tm_469762520 = map_469762193[chckIndx(i_469762606, 0, (map_469762193).length - 1)];
      if (!((tm_469762520 == 0))) {
      var i_469762521 = subInt(tm_469762520, 1);
      var sx_469762522 = mulInt(modInt(i_469762521, 32), 74);
      var sy_469762523 = mulInt(divInt(i_469762521, 32), 74);
      var dx_469762524 = mulInt(modInt(j_469762519, 12), 32);
      var dy_469762525 = mulInt(divInt(j_469762519, 12), 32);
      ctx_469762052.drawImage(tex_469762131, sx_469762522, sy_469762523, 64, 64, dx_469762524, dy_469762525, 32, 32);
      }
      
      i_469762606 = addInt(i_469762606, 1);
      if (!(((map_469762193).length == L_469762607))) {
      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
      }
     }
   } while (false);
  } while (false);
  Label4: do {
   var c_469762546 = ({center: ({x: 0.0, y: 0.0}), radius: 0.0, inertia: ({x: 0.0, y: 0.0}), is_static: false});
   var i_469762611 = 0;
   var L_469762612 = (circles_469762077[0]).length;
   Label5: do {
     Label6: while (true) {
     if (!(i_469762611 < L_469762612)) break Label6;
      c_469762546 = circles_469762077[0][chckIndx(i_469762611, 0, (circles_469762077[0]).length - 1)];
      draw_ap2_469762547(c_469762546);
      i_469762611 = addInt(i_469762611, 1);
      if (!(((circles_469762077[0]).length == L_469762612))) {
      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
      }
     }
   } while (false);
  } while (false);
  }
}

window.addEventListener('keydown', key_event_469762563);
setInterval(animate_469762338, 55);
